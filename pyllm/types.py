import re

from dataclasses import dataclass
from typing import Optional, Union, List, Callable

from pyllm.parsers import ParserBase


@dataclass
class SamplingParams:
    """
    Generation parameters following OpenAI's API
    """

    temperature: Optional[float] = None
    top_p: Optional[float] = None
    n: Optional[int] = None
    stop: Optional[Union[str, List[str]]] = None
    max_tokens: Optional[int] = None
    presence_penalty: Optional[float] = None
    frequency_penalty: Optional[float] = None
    seed: Optional[int] = None


class Function:
    """
    Wrapper for generated functions
    """

    function: Callable
    source: str
    model_name: str
    sampling_params: SamplingParams
    parser: ParserBase

    def __init__(
        self,
        function: Callable,
        source: str,
        model_name: str,
        sampling_params,
        parser: ParserBase,
    ):
        self.function = function
        self.source = source
        self.model_name = model_name
        self.sampling_params = sampling_params
        self.parser = parser

    def __call__(self, *args, **kwargs):
        return self.function(*args, **kwargs)

    def __str__(self):
        pattern = r"(def .+:\n(?:\s+.+\n)*)"
        return re.findall(pattern, self.source)[0]

    def __repr__(self):
        return f"<Function generated by {self.model_name} seed={self.sampling_params['seed']}>"

    def __doc__(self):
        return self.function.__doc__
