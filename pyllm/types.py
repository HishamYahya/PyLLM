from dataclasses import dataclass
from typing import Optional, Union, List, Callable


@dataclass
class SamplingParams:
    """
    Generation parameters following OpenAI's API
    """
    temperature: Optional[float] = None
    top_p: Optional[float] = None
    n: Optional[int] = None
    stop: Optional[Union[str, List[str]]] = None
    max_tokens: Optional[int] = None
    presence_penalty: Optional[float] = None
    frequency_penalty: Optional[float] = None
    seed: Optional[int] = None


class Function:
    """
    Wrapper for generated functions
    """
    function: Callable
    source: str
    seed: int

    def __init__(self, function: Callable, source: str, model_name: str, seed: int):
        self.function = function
        self.source = source
        self.model_name = model_name
        self.seed = seed

    def __call__(self, *args, **kwargs):
        return self.function(*args, **kwargs)

    def __str__(self):
        return self.source

    def __repr__(self):
        return f"Function generated by {self.model} with seed {self.seed}. Source response:\n{self.source}"
